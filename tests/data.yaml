join_on_condition_equal:
  sql:
  - foo join bar on foo.id > bar.foo_id
  - '`foo` join bar on foo.id > bar.foo_id'
  - '`foo` join `bar` on foo.id > bar.foo_id'
  - foo inner join bar on foo.id > bar.foo_id
  sqla: foo.join(bar, foo.c.id > bar.c.foo_id)

join_on_condition_not_equal:
  sql:
  - foo join bar on foo.id <> bar.foo_id
  - foo join bar on foo.id != bar.foo_id
  - foo inner join bar on foo.id <> bar.foo_id
  - foo inner join bar on foo.id != bar.foo_id
  sqla: foo.join(bar, foo.c.id != bar.c.foo_id)

join_on_conjunction_operator_precedence:
  sql: foo join bar on foo.id = bar.foo_id and bar.val > 1 or foo.val < 5
  sqla: foo.join(bar, or_(and_(foo.c.id == bar.c.foo_id, bar.c.val > 1), foo.c.val < 5))

join_on_conjunction_operator_precedence_2:
  sql: foo join bar on foo.id = bar.foo_id or bar.val > 1 and foo.val < 5
  sqla: foo.join(bar, or_(foo.c.id == bar.c.foo_id, and_(bar.c.val > 1, foo.c.val < 5)))

join_on_conjunction_operator_precedence_3:
  sql: foo join bar on foo.id = bar.foo_id or bar.val > 1 and foo.val < 5 or foo.val = 7
  sqla: foo.join(bar, or_(or_(foo.c.id == bar.c.foo_id, and_(bar.c.val > 1, foo.c.val < 5)), foo.c.val == 7))

join_on_conjunction_with_left_and_right_parens:
  sql: foo join bar on (foo.id = bar.foo_id) and (bar.val > 1 or foo.val < 5)
  sqla: foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5)))

join_on_conjunction_with_left_parens:
  sql: foo join bar on (foo.id = bar.foo_id) and bar.val > 1 or foo.val < 5
  sqla: foo.join(bar, or_(and_(foo.c.id == bar.c.foo_id, bar.c.val > 1), foo.c.val < 5))

join_on_conjunction_with_right_parens:
  sql: foo join bar on foo.id = bar.foo_id and (bar.val > 1 or foo.val < 5)
  sqla: foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5)))

join_on_expr_and_expr:
  sql: foo join bar on foo.id = bar.foo_id and bar.val > 1
  sqla: foo.join(bar, and_(foo.c.id == bar.c.foo_id, bar.c.val > 1))

join_on_expr_or_expr:
  sql: foo join bar on foo.id = bar.foo_id or bar.val > 1
  sqla: foo.join(bar, or_(foo.c.id == bar.c.foo_id, bar.c.val > 1))

join_three_tables:
  sql:
  - foo join bar join baz
  - foo inner join bar join baz
  - foo join bar inner join baz
  - foo inner join bar inner join baz
  sqla: foo.join(bar).join(baz)

join_two_tables:
  sql:
  - foo join bar
  - foo inner join bar
  sqla: foo.join(bar)

lone_select:
  sql: select
  sqla: select()

select_aliased_columns:
  sql: SELECT foo.id AS the_id, foo.name AS the_name FROM foo
  sqla: select([foo.c.id.label('the_id'), foo.c.name.label('the_name')])

select_column_from_table:
  sql: select id from foo
  sqla: select([foo.c.id])
  data:
    foo:
    - {name: "abc"}
    - {name: "xyz"}
  output:
  - [1]
  - [2]

select_columns:
  sql: select a, b
  sqla: select([text('a'), text('b')])

select_from_cross_join:
  sql:
  - select * from foo, bar
  - select * from foo cross join bar
  sqla: select([foo, bar])

select_from_cross_join_three_tables:
  sql:
  - select * from foo, bar, wumbo
  - select * from foo, bar cross join wumbo
    # - select * from foo cross join bar, wumbo
  - select * from foo cross join bar cross join wumbo
  sqla: select([foo, bar, wumbo])

select_from_cross_join_with_where_clause:
  sql:
  - select * from foo, bar, wumbo where foo.id = bar.foo_id
  - select * from foo cross join bar cross join wumbo where foo.id = bar.foo_id
  sqla: select([foo, bar, wumbo]).where(foo.c.id == bar.c.foo_id)

select_columns_from_cross_join:
  sql: select foo.id, bar.id from foo, bar
  sqla: select([foo.c.id, bar.c.id])

select_columns_from_join:
  sql:
  - select foo.id, bar.id, foo.name, bar.name from foo join bar
  - select foo.id, bar.id, foo.name, bar.name from foo inner join bar
  - select `foo`.`id`, `bar`.`id`, `foo`.`name`, `bar`.`name` from `foo` join `bar`
  sqla: select([foo.c.id, bar.c.id, foo.c.name, bar.c.name]).select_from(foo.join(bar))
  data:
    bar:
    - {foo_id: 1, name: "foo-abc"}
    - {foo_id: 2, name: "foo-xyz"}
    - {foo_id: 1, name: "foo-ABC"}
    - {foo_id: 2, name: "foo-XYZ"}
    foo:
    - {name: "abc"}
    - {name: "xyz"}
  output:
  - [1, 1, "abc", "foo-abc"]
  - [2, 2, "xyz", "foo-xyz"]
  - [1, 3, "abc", "foo-ABC"]
  - [2, 4, "xyz", "foo-XYZ"]

select_columns_from_table:
  sql: select id, foo_id, name from bar
  sqla: select([bar.c.id, bar.c.foo_id, bar.c.name])
  data:
    bar:
    - {foo_id: 1, name: "abc"}
    - {foo_id: 1, name: "xyz"}
    foo:
    - {name: "abc"}
  output:
  - [1, 1, "abc"]
  - [2, 1, "xyz"]

select_distinct:
  sql: select distinct
  sqla: select().distinct()

select_distinct_column_from_table:
  sql: select distinct name from foo
  sqla: select([foo.c.name]).distinct()
  data:
    foo:
    - {name: "abc"}
    - {name: "abc"}
    - {name: "xyz"}
    - {name: "xyz"}
  output:
  - ["abc"]
  - ["xyz"]

select_distinct_from_join:
  sql: select distinct foo.name from foo join bar
  sqla: select([foo.c.name]).select_from(foo.join(bar)).distinct()
  data:
    bar:
    - {foo_id: 1, name: "bar_abc"}
    - {foo_id: 1, name: "bar_abc"}
    - {foo_id: 2, name: "bar_xyz"}
    - {foo_id: 2, name: "bar_xyz"}
    foo:
    - {name: "abc"}
    - {name: "xyz"}
  output:
  - ["abc"]
  - ["xyz"]

select_distinct_from_join_with_where:
  sql: SELECT DISTINCT foo.name FROM foo JOIN bar WHERE bar.name = "bar_abc"
  sqla: select([foo.c.name]).select_from(foo.join(bar)).distinct().where(bar.c.name == "bar_abc")
  data:
    bar:
    - {foo_id: 1, name: "bar_abc"}
    - {foo_id: 1, name: "bar_abc"}
    - {foo_id: 2, name: "bar_xyz"}
    - {foo_id: 2, name: "bar_xyz"}
    foo:
    - {name: "abc"}
    - {name: "xyz"}
  output:
  - ["abc"]

select_distinct_from_table_with_where_clause:
  sql: select distinct name from foo where foo.name = "abc"
  sqla: select([foo.c.name]).distinct().where(foo.c.name == "abc")
  data:
    foo:
    - {name: "abc"}
    - {name: "abc"}
    - {name: "xyz"}
    - {name: "xyz"}
  output:
  - ["abc"]

select_from_join_on_condition:
  sql: select * from foo join bar on foo.id = bar.foo_id
  sqla: select([foo.join(bar, foo.c.id == bar.c.foo_id)])

select_from_join_on_multiclause_condition:
  sql: SELECT foo.id, bar.val FROM foo join bar ON (foo.id = bar.foo_id) AND (bar.val > 1 OR foo.val < 5)
  sqla: select([foo.c.id, bar.c.val]).select_from(foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5))))

select_from_join_where:
  sql: SELECT * FROM foo JOIN bar WHERE foo.id > 1 AND foo.name = "wumbo"
  sqla: select([foo.join(bar)]).where(and_(foo.c.id > 1, foo.c.name == "wumbo"))

select_from_join_where_between:
  sql: SELECT * FROM foo JOIN bar WHERE foo.id BETWEEN 10 AND 20
  sqla: select([foo.join(bar)]).where(between(foo.c.id, 10, 20))

select_from_join_where_not_between:
  sql: SELECT * FROM foo JOIN bar WHERE foo.id NOT BETWEEN 1 AND 4
  sqla: select([foo.join(bar)]).where(not_(between(foo.c.id, 1, 4)))

select_from_select_aliased_columns:
  sql: SELECT the_id, the_name FROM (SELECT foo.id AS the_id, foo.name AS the_name FROM foo)
  sqla: select([text('the_id'), text('the_name')]).select_from(select([foo.c.id.label('the_id'), foo.c.name.label('the_name')]))

select_from_subquery:
  sql: SELECT id FROM (SELECT * FROM foo)
  sqla: select([text('id')]).select_from(select([foo]))

select_from_where:
  sql: SELECT * FROM foo WHERE foo.id = 1
  sqla: select([foo]).where(foo.c.id == 1)

select_from_where_between:
  sql: SELECT * FROM foo WHERE foo.id BETWEEN 2 AND 4
  sqla: select([foo]).where(between(foo.c.id, 2, 4))
  data:
    foo:
    - {name: "foo1"}
    - {name: "foo2"}
    - {name: "foo3"}
    - {name: "foo4"}
    - {name: "foo5"}
  output:
  - [2, "foo2"]
  - [3, "foo3"]
  - [4, "foo4"]

select_from_where_between_and_clause:
  sql: SELECT * FROM foo WHERE (foo.id BETWEEN 3 AND 10) AND foo.name <> "wumbo"
  sqla: select([foo]).where(and_(between(foo.c.id, 3, 10), foo.c.name != "wumbo"))
  data:
    foo:
    - {name: "foo1"}
    - {name: "foo2"}
    - {name: "foo3"}
    - {name: "foo4"}
    - {name: "wumbo"}
    - {name: "foo6"}
    - {name: "wumbo"}
    - {name: "foo8"}
  output:
  - [3, "foo3"]
  - [4, "foo4"]
  - [6, "foo6"]
  - [8, "foo8"]

select_from_where_between_strings:
  sql: SELECT * FROM foo WHERE foo.name BETWEEN "a" AND "z"
  sqla: select([foo]).where(between(foo.c.name, "a", "z"))

select_from_where_expr_and_expr:
  sql: SELECT * FROM foo WHERE foo.id > 1 AND foo.name = "wumbo"
  sqla: select([foo]).where(and_(foo.c.id > 1, foo.c.name == "wumbo"))

select_from_where_not_between:
  sql: SELECT * FROM foo WHERE foo.id NOT BETWEEN 2 AND 3
  sqla: select([foo]).where(not_(between(foo.c.id, 2, 3)))
  data:
    foo:
    - {name: "foo1"}
    - {name: "foo2"}
    - {name: "foo3"}
    - {name: "foo4"}
    - {name: "foo5"}
  output:
  - [1, "foo1"]
  - [4, "foo4"]
  - [5, "foo5"]

select_from_where_not_between_and_clause:
  sql: SELECT * FROM foo WHERE (foo.id NOT BETWEEN 3 AND 10) AND foo.name <> "wumbo"
  sqla: select([foo]).where(and_(not_(between(foo.c.id, 3, 10)), foo.c.name != "wumbo"))
  data:
    foo:
    - {name: "wumbo"}
    - {name: "foo2"}
    - {name: "wumbo"}
    - {name: "foo4"}
    - {name: "wumbo"}
    - {name: "foo6"}
    - {name: "wumbo"}
    - {name: "foo8"}
  output:
  - [2, "foo2"]

select_from_where_parenthesis:
  sql: SELECT * FROM foo WHERE (foo.id > 1 AND foo.name = "wumbo")
  sqla: select([foo]).where(and_(foo.c.id > 1, foo.c.name == "wumbo"))

select_qualified_columns_from_table:
  sql: select foo.id, foo.name from foo
  sqla: select([foo.c.id, foo.c.name])

select_star_from_join:
  sql:
  - select * from foo join bar
  - select * from foo inner join bar
  sqla: select([foo.join(bar)])

select_star_from_table:
  sql: select * from foo
  sqla: select([foo])
  data:
    foo:
    - {name: "abc"}
    - {name: "xyz"}
  output:
  - [1, "abc"]
  - [2, "xyz"]

select_star_from_keyword:
  sql:
  - select * from user
  - select * from table
  sqla: ''
  exception: |
    Unexpected keyword '\w+'.

select_star_from_three_joined_tables:
  sql:
  - select * from foo join bar join wumbo
  - select * from foo inner join bar join wumbo
  - select * from foo join bar inner join wumbo
  - select * from foo inner join bar inner join wumbo
  sqla: select([foo.join(bar).join(wumbo)])
  data:
    foo:
      - {name: "abc"}
    bar:
      - {name: "123", foo_id: 1}
    wumbo:
      - {name: "squidward", timestamp: 1234, result: "good", bar_id: 1, foo_id: 1}
  output:
    - [
      1, 'abc',                            # foo: id, name
      1, 1, '123',                         # bar: id, foo_id, name,
      1, 1, 1, "squidward", 1234, 'good',  # wumbo: id, foo_id, bar_id, name, timestamp, result
    ]

select_star_from_joined_tables_with_condition:
  sql: select * from foo join bar on foo.id = bar.foo_id join wumbo on foo.id = wumbo.foo_id
  sqla: select([foo.join(bar, foo.c.id == bar.c.foo_id).join(wumbo, foo.c.id == wumbo.c.foo_id)])
  data:
    foo:
      - {name: "abc"}
    bar:
      - {name: "123", foo_id: 1}
    wumbo:
      - {name: "squidward", timestamp: 1234, result: "good", bar_id: 1, foo_id: 1}
  output:
    - [
      1, 'abc',                            # foo: id, name
      1, 1, '123',                         # bar: id, foo_id, name,
      1, 1, 1, "squidward", 1234, 'good',  # wumbo: id, foo_id, bar_id, name, timestamp, result
    ]

select_star_from_limit:
  sql: select * from foo limit 2
  sqla: select([foo]).limit(2)
  data:
    foo:
      - {name: 'first'}
      - {name: 'second'}
      - {name: 'third'}
      - {name: 'fourth'}
  output:
    - [1, 'first']
    - [2, 'second']

select_from_where_limit:
  sql: select name from foo where foo.id > 1 limit 2
  sqla: select([foo.c.name]).where(foo.c.id > 1).limit(2)
  data:
    foo:
      - {name: 'first'}
      - {name: 'second'}
      - {name: 'third'}
      - {name: 'fourth'}
  output:
    - ['second']
    - ['third']

# Offset without limit is disallowed in sql.
# (Although, sqlalchemy allows it, using -1 for the limit)
select_star_from_offset:
  sql: select * from foo offset 2
  sqla: ''
  exception: |
    Cannot use OFFSET without LIMIT

select_star_from_limit_offset:
  sql: select * from foo limit 2 offset 1
  sqla: select([foo]).limit(2).offset(1)
  data:
    foo:
      - {name: 'first'}
      - {name: 'second'}
      - {name: 'third'}
      - {name: 'fourth'}
  output:
    - [2, 'second']
    - [3, 'third']

select_star_from_where_limit_offset:
  sql: select * from foo where foo.id > 3 limit 2 offset 1
  sqla: select([foo]).where(foo.c.id > 3).limit(2).offset(1)
  data:
    foo:
      - {name: 'a'}
      - {name: 'b'}
      - {name: 'c'}
      - {name: 'd'}
      - {name: 'e'}
      - {name: 'f'}
      - {name: 'g'}
  output:
    - [5, 'e']
    - [6, 'f']

insert:
  sql:
  - insert
  - insert into foo values ('abc')
  sqla: ''
  exception: |
    'INSERT' is not supported yet

select_star_from_where_subquery:
  sql: select * from foo where foo.id = (select name from bar)
  sqla: select([foo]).where(foo.c.id == select([bar.c.name]))
  data:
    foo:
      - {name: 'a'}
      - {name: 'b'}
      - {name: 'c'}
    bar:
      - {foo_id: 1, name: "a"}
    output:
      - [1, 'a']


select_star_from_where_subquery_2:
  sql: select * from foo where (select name from bar) = foo.id
  sqla: select([foo]).where(select([bar.c.name]) == foo.c.id)
  data:
    foo:
      - {name: 'a'}
      - {name: 'b'}
      - {name: 'c'}
    bar:
      - {foo_id: 1, name: "c"}
    output:
      - [3, 'c']
